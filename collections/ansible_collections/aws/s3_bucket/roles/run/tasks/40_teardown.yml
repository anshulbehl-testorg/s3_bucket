---
- name: Find EC2 instances by tag
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ tag_name }}-instance"
    region: "{{ region }}"
  register: ec2_instance_final

- name: Terminate EC2 instance
  amazon.aws.ec2_instance:
    instance_ids: "{{ ec2_instance_final.instances | map(attribute='instance_id') | list }}"
    region: "{{ region }}"
    state: absent
  when: ec2_instance_final.instances | length > 0

# - name: Teardown - Delete Load Balancer
#   amazon.aws.elb_application_lb:
#     name: "{{ load_balancer.load_balancer_name }}"
#     region: "{{ region }}"
#     state: absent
#   when: teardown and load_balancer.load_balancer_name is defined

- name: Find the Security Group by Name
  amazon.aws.ec2_security_group_info:
    filters:
      "tag:Name": "{{ tag_name }}-sg"
    region: "{{ region }}"
  register: security_group_info

- name: Teardown - Delete Security Group
  amazon.aws.ec2_security_group:
    group_id: "{{ security_group_info.security_groups[0].group_id }}"
    region: "{{ region }}"
    state: absent
  when: security_group_info.security_groups | length > 0

- name: Retrieve VPC Information
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ tag_name }}-vpc"  # Adjust the filter to match how your VPC is tagged
    region: "{{ region }}"
  register: vpc_info

- name: Find Subnet by VPC and CIDR
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
      cidr-block: "{{ run_subnet_cidr }}"
    region: "{{ region }}"
  register: subnet_info
  when: vpc_info.vpcs | length > 0

- name: Set Subnet ID if Found
  ansible.builtin.set_fact:
    subnet_id: "{{ subnet_info.subnets[0].subnet_id }}"
  when: subnet_info.subnets is defined and subnet_info.subnets | length > 0

- name: Teardown - Delete Subnet
  amazon.aws.ec2_vpc_subnet:
    region: "{{ region }}"
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    cidr: "{{ run_subnet_cidr }}"
    state: absent
  when: subnet_id is defined

- name: Detach Internet Gateway from VPC
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    state: absent
    region: "{{ region }}"
  when: vpc_info.vpcs | length > 0

- name: Get the route table associated with the subnet
  amazon.aws.ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
    region: "{{ region }}"
  register: route_tables_info
  when: vpc_info.vpcs | length > 0

- name: Delete each route table
  amazon.aws.ec2_vpc_route_table:
    route_table_id: "{{ item.route_table_id }}"
    region: "{{ region }}"
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    lookup: id
    state: absent
  loop: "{{ route_tables_info.route_tables }}"
  when: vpc_info.vpcs | length > 0
  failed_when: false

- name: Teardown - Delete VPC
  amazon.aws.ec2_vpc_net:
    vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"
    region: "{{ region }}"
    state: absent
  when: vpc_info.vpcs | length > 0
